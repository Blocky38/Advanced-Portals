package com.sekwah.advancedportals;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.metadata.FixedMetadataValue;

import com.sekwah.advancedportals.portalcontrolls.Portal;

public class Listeners implements Listener {
	
	private final AdvancedPortalsPlugin plugin;
	
	// The needed config values will be stored so they are easier to access later
	// an example is in the interact event in this if statement if((!UseOnlyServerAxe || event.getItem().getItemMeta().getDisplayName().equals("§eP...
	private static boolean UseOnlyServerAxe = false;

	private static Material WandMaterial;
	
    public Listeners(AdvancedPortalsPlugin plugin) {
        this.plugin = plugin;
        
        ConfigAccessor config = new ConfigAccessor(plugin, "Config.yml");
        this.UseOnlyServerAxe = config.getConfig().getBoolean("UseOnlyServerMadeAxe");
        
		String ItemID = config.getConfig().getString("AxeItemId");
		
		try
		{
			WandMaterial = Material.getMaterial(Integer.parseInt(ItemID));
		}
		catch(Exception e)
		{
			WandMaterial = Material.getMaterial(ItemID);
		}
        
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }
    
    public static void reloadValues(AdvancedPortalsPlugin plugin) {
        
        ConfigAccessor config = new ConfigAccessor(plugin, "Config.yml");
        UseOnlyServerAxe = config.getConfig().getBoolean("UseOnlyServerMadeAxe");
        
		String ItemID = config.getConfig().getString("AxeItemId");
		
		try
		{
			WandMaterial = Material.getMaterial(Integer.parseInt(ItemID));
		}
		catch(Exception e)
		{
			WandMaterial = Material.getMaterial(ItemID);
		}
    }
	
    @EventHandler
    public void onMoveEvent(PlayerMoveEvent event) {
    	// will check if the player is in the portal or not.
    	Object[] portals = Portal.Portals;
    	for(Object portal : portals){
    		System.out.println("Checking " + portal.toString());
    	}
    	
    }
    
    @SuppressWarnings("deprecation")
    @EventHandler
    public void oniteminteract(PlayerInteractEvent event) {
    	// will detect if the player is using an axe so the points of a portal can be set
    	// also any other detections such as sign interaction or basic block protection
    	Player player = event.getPlayer();
    	if(player.hasPermission("AdvancedPortals.CreatePortal")){
    		
    		// UseOnlyServerMadeAxe being set to true makes is so only the axe generated by the server can be used so other iron axes can be used normally,
    		//  by default its false but it is a nice feature in case the user wants to use the axe normally too, such as a admin playing survival or it being used
    		//  as a weapon.
    		if((!UseOnlyServerAxe || event.getItem().getItemMeta().getDisplayName().equals("§ePortal Region Selector")) && event.getPlayer().getItemInHand().getTypeId() == WandMaterial.getId()) {
    			
    			// This checks if the action was a left or right click and if it was directly effecting a block.
    			if(event.getAction() == Action.LEFT_CLICK_BLOCK) {
    				Location blockloc = event.getClickedBlock().getLocation();
    				// stores the selection as metadata on the character so then it isn't saved anywhere, if the player logs out it will
    				//  have to be selected again if the player joins, also it does not affect any other players.
    				player.setMetadata("Pos1X", new FixedMetadataValue(plugin, blockloc.getBlockX()));
    				player.setMetadata("Pos1Y", new FixedMetadataValue(plugin, blockloc.getBlockY()));
    				player.setMetadata("Pos1Z", new FixedMetadataValue(plugin, blockloc.getBlockZ()));
    				player.setMetadata("Pos1World", new FixedMetadataValue(plugin, blockloc.getWorld().getName()));
    				player.sendMessage("§eYou have selected pos1! X:" + blockloc.getBlockX() + " Y:" + blockloc.getBlockY() + " Z:" + blockloc.getBlockZ() + " World: " +  blockloc.getWorld().getName());
    				
    				// Stops the event so the block is not damaged
    				event.setCancelled(true);
    				
    				// Returns the event so no more code is executed(stops unnecessary code being executed)
    				return;
    			}
    			else if(event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    				Location blockloc = event.getClickedBlock().getLocation();
    				player.setMetadata("Pos2X", new FixedMetadataValue(plugin, blockloc.getBlockX()));
    				player.setMetadata("Pos2Y", new FixedMetadataValue(plugin, blockloc.getBlockY()));
    				player.setMetadata("Pos2Z", new FixedMetadataValue(plugin, blockloc.getBlockZ()));
    				player.setMetadata("Pos2World", new FixedMetadataValue(plugin, blockloc.getWorld().getName()));
    				player.sendMessage("§eYou have selected pos2! X:" + blockloc.getBlockX() + " Y:" + blockloc.getBlockY() + " Z:" + blockloc.getBlockZ() + " World: " +  blockloc.getWorld().getName());
    				
    				// Stops the event so the block is not interacted with
    				event.setCancelled(true);
    				
    				// Returns the event so no more code is executed(stops unnecessary code being executed)
    				return;
    			}
    			
    		}
    		
    	}
    	
    }
    
    
	
}
