import org.apache.commons.codec.Charsets
import org.apache.http.HttpEntity
import org.apache.http.HttpResponse
import org.apache.http.client.HttpClient
import org.apache.http.client.config.CookieSpecs
import org.apache.http.client.config.RequestConfig
import org.apache.http.client.methods.CloseableHttpResponse
import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.ContentType
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.impl.client.HttpClients
import org.apache.http.client.methods.HttpGet

buildscript {
    repositories {
        maven {url "https://plugins.gradle.org/m2/"}
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "org.apache.httpcomponents:httpmime:4.5.13"
        classpath "com.google.code.gson:gson:2.6.2"
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'

def branch = System.getenv("GITHUB_REF");
def sha = System.getenv("GITHUB_SHA");
def isDevBranch = branch == null || !(branch.startsWith("refs/tags/") && !branch.contains("-"))

group = 'com.sekwah.advancedportals'
version = getPluginData("version") + (isDevBranch ? '-SNAPSHOT' : '')

description = ""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

String getPluginData(String tag) {
    File file = file("src/main/resources/plugin.yml")
    String version = "notfound"
    file.readLines("UTF-8").each {String line ->
        line = line.trim()
        if(line.startsWith(tag)) {
            version = line.substring(tag.length() + 2, line.length())
        }
    }
    println "Advanced Portals v" + version
    return version
}

configurations {
    // configuration that holds jars to copy into lib
    includeLibs
}

repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://nexus.velocitypowered.com/repository/maven-public/" }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
}

// includeLibs just says to include the library in the final jar
dependencies {
    // to stop IntelliJ complaining about this build script
    testCompile "org.apache.httpcomponents:httpmime:4.5.13"
    testCompile "org.apache.httpcomponents:httpclient:4.5.13"
    testCompile "com.google.code.gson:gson:2.6.2"

    //implementation "org.bukkit:bukkit:1.16.1-R0.1-SNAPSHOT"
    implementation "org.spigotmc:spigot-api:1.16.1-R0.1-SNAPSHOT"
    implementation "net.md-5:bungeecord-api:1.15-SNAPSHOT"

    implementation "com.velocitypowered:velocity-api:1.1.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:1.1.0-SNAPSHOT"

    implementation "io.netty:netty-all:4.0.4.Final"
    compileOnly 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'

    //compile fileTree(dir: 'libs', include: ['*.jar'])
}

/** For pre-releases and testers to be able to try the latest commits if they want.
 * If the builds start exceeding 8MB then we may want to upload to s3 instead and periodically clear.
 * TODO possibly add a task that announces when builds are made?
 * Though add a note that it may take a while for Curse to approve the files.
 */
task discordupload {
    dependsOn(jar)
    doLast {
        String discordWebhook = System.getenv("DISCORD_WEBHOOK")

        if(discordWebhook != null) {
            println("Logging Into Discord")

            CloseableHttpClient httpClient = HttpClients.createDefault()
            HttpPost uploadFile = new HttpPost(discordWebhook)

            MultipartEntityBuilder builder = MultipartEntityBuilder.create()
            builder.addTextBody("content", "New automated dev build\n\n" +
                    "Current Features: <${project.github}/blob/${sha}/CHANGELOG.md>")

            builder.addBinaryBody("file", file(jar.archiveFile).newInputStream(), ContentType.APPLICATION_OCTET_STREAM, jar.archiveName)

            HttpEntity multipart = builder.build()

            uploadFile.setEntity(multipart)
            CloseableHttpResponse response = httpClient.execute(uploadFile)
            response.getEntity()

            println("Posted build")

        } else {
            println("Discord webhook unspecified")
        }
    }
}


String getValueFromCurseAPI(apiKey, endpoint) {
    String API_BASE_URL = 'https://minecraft.curseforge.com'

    HttpClient client = HttpClientBuilder.create()
            .setDefaultRequestConfig(RequestConfig.custom()
                    .setCookieSpec(CookieSpecs.IGNORE_COOKIES).build()).build()

    HttpGet get = new HttpGet(API_BASE_URL + endpoint)
    get.setHeader('X-Api-Token', apiKey)

    HttpResponse response = client.execute(get)

    int statusCode = response.statusLine.statusCode

    if (statusCode == 200) {
        byte[] data = response.entity.content.bytes
        return new String(data, Charsets.UTF_8)
    } else {
        if (response.getFirstHeader('content-type').value.contains('json')) {
            InputStreamReader reader = new InputStreamReader(response.entity.content)
            reader.close()
            throw new RuntimeException("[CurseForge] Error")
        } else {
            throw new RuntimeException("[CurseForge] HTTP Error Code $response.statusLine.statusCode: $response.statusLine.reasonPhrase")
        }
    }
    return ""
}

class VersionInfo {
    int id
    String name
    String slug
}

class GameVersion {
    int id
    int gameVersionTypeID
    String name
    String slug
}


// Based on https://github.com/matthewprenger/CurseGradle as it didnt support Bukkit uploads at the time.
task curseforge {
    dependsOn(jar)
    doLast {
        String apiKey = null

        if (System.getenv("CURSE_API") != null) {
            apiKey = System.getenv("CURSE_API")
        }

        if(apiKey != null) {
            String VERSION_TYPES_URL = "/api/game/version-types"
            String VERSION_URL = "/api/game/versions"
            String UPLOAD_URL = "/api/projects/%s/upload-file"
            println("Uploading to CurseForge")

            println(getValueFromCurseAPI(apiKey, VERSION_TYPES_URL))

            println("Published build")

        } else {
            println("Discord webhook unspecified")
        }
    }
//        id = project.curse_project_id
//        // TODO add code to reference this but also cut the latest change logs in for the files
//        changelog = "${project.github}/blob/${sha}/CHANGELOG.md"
//        changelogType = 'markdown'
//        releaseType = 'release'
}

task copyPlugin {
    doLast {
        copy {
            if(System.env.MC_SERVER_LOC == null) {
                throw new Exception('You must set the server location and jar to use')
            }
            println "$buildDir/libs/Advanced-Portals-${version}.jar"
            println "${System.env.MC_SERVER_LOC}/plugins/Advanced-Portals-${version}.jar"
            try {
                delete fileTree("${System.env.MC_SERVER_LOC}/plugins/") {
                    include "*.jar"
                }
            }
            catch(RuntimeException e) {
                println e.getLocalizedMessage()
            }
            from file("$buildDir/libs/Advanced-Portals-${version}.jar")
            into file("${System.env.MC_SERVER_LOC}/plugins/")
        }
    }
}

// Set SPIGOT_LOC to the location of your server and SPIGOT_JAR as the name of the jar file in the server you want to run
// DIReallyKnowWhatIAmDoingISwear is to remove the stupid pause spigot has at the start
task runJar() {
    doLast {
        if(System.env.MC_SERVER_LOC == null || System.env.MC_SERVER_JAR == null) {
            throw new Exception('You must set the server location and jar to use MC_SERVER_LOC and MC_SERVER_JAR')
        }
        javaexec {
            main "-jar"
            args "${System.env.MC_SERVER_LOC}\\${System.env.MC_SERVER_JAR}.jar"
            jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005", "-DIReallyKnowWhatIAmDoingISwear=true"]
            workingDir "${System.env.MC_SERVER_LOC}"
        }
    }
}

/**
 * These are needed as standard-version doesnt allow for the ability to skip tag versions for the changelog.
 * Well it does but not on purpose and it breaks things.
 */
task updateChangelog {
    doLast{
        exec {
            commandLine 'cmd', '/c', 'npx standard-version -t (v)[0-9]+.[0-0]+.[0-0]+(?!-) --skip.tag --skip.bump --skip.commit'
            ext.output = {
                return standardOutput.toString()
            }
        }
        exec {
            commandLine 'cmd', '/c', 'git add CHANGELOG.md'
            ext.output = {
                return standardOutput.toString()
            }
        }
        exec {
            commandLine 'cmd', '/c', 'git commit -m "chore(changelog): Update CHANGELOG.md with full release notes.'
            ext.output = {
                return standardOutput.toString()
            }
        }
        exec {
            commandLine 'cmd', '/c', 'npx standard-version --skip.changelog'
            ext.output = {
                return standardOutput.toString()
            }
        }
    }
}

task updateChangelogPreRelease(type: Exec) {
    commandLine 'cmd', '/c', 'npx standard-version --prerelease'
    ext.output = {
        return standardOutput.toString()
    }
}
